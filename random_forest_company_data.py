# -*- coding: utf-8 -*-
"""Assignment_15_(Random_Forest)_Company_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZDtSURhl-XLET0gyvzIZclMhj-tZlMQ

# Random Forest

## A cloth manufacturing company is interested to know about the segment or attributes causes high sale

## Importing Libraries
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix,classification_report,accuracy_score
from sklearn.model_selection import train_test_split

"""## Importing the Data"""

company_data = pd.read_csv('/content/Company_Data.csv')
company_data

"""## Data Understanding"""

company_data.shape

company_data.dtypes

company_data['ShelveLoc'] = company_data['ShelveLoc'].astype('category')
company_data['Urban'] = company_data['Urban'].astype('category')
company_data['US'] = company_data['US'].astype('category')

company_data.isna().sum()

print(company_data.duplicated())

company_data.describe(include='all')

company_data['High'] = company_data['Sales'].map(lambda x: 1 if x>8 else 0)
company_data['ShelveLoc'] = company_data['ShelveLoc'].cat.codes
company_data['Urban'] = company_data['Urban'].cat.codes
company_data['US'] = company_data['US'].cat.codes
company_data

"""## Data Preparation"""

X=company_data.iloc[:,1:11]
y=company_data['High']
print(X)
print(y)

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size= 0.1,random_state=42)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""## Model Builing"""

rf_model=RandomForestClassifier()

"""## Finding out the best hyperparameter for building the Tree

"""

from sklearn.model_selection import GridSearchCV

grid_search = GridSearchCV(estimator = rf_model, param_grid = {'criterion':['gini','entropy'],'max_depth':[2,3,4,5,6,7,8,9,10,11,12]} , cv= 5)
grid_search

grid_search.fit(X,y)

grid_search.best_params_

grid_search.best_score_

"""## Model Training"""

rf_model = RandomForestClassifier(criterion= 'entropy', max_depth=9)

rf_model.fit(X_train,y_train)

"""## Model Testing"""

y_pred_train = rf_model.predict(X_train)

y_pred_test = rf_model.predict(X_test)

"""## Model Evaluation

## Confusion_Matrix :- To know the Misclassification done by the model
"""

accuracy_score(y_train,y_pred_train)

confusion_matrix(y_train,y_pred_train)

print(classification_report(y_train,y_pred_train))

accuracy_score(y_test,y_pred_test)

confusion_matrix(y_test,y_pred_test)

print(classification_report(y_test,y_pred_test))

"""# Model Improvement 1 : AdaBoost"""

from sklearn.ensemble import AdaBoostClassifier

"""## Model Builing and Model Training"""

ad_model = AdaBoostClassifier()

ad_model.fit(X_train,y_train)

"""## Model Testing"""

y_pred_train_d1 = ad_model.predict(X_train)

y_pred_test_d1 = ad_model.predict(X_test)

"""## Model Evaluation

## Confusion_Matrix :- To know the Misclassification done by the model
"""

accuracy_score(y_train,y_pred_train_d1)

confusion_matrix(y_train,y_pred_train_d1)

print(classification_report(y_train,y_pred_train_d1))

accuracy_score(y_test,y_pred_test_d1)

confusion_matrix(y_test,y_pred_test_d1)

print(classification_report(y_test,y_pred_test_d1))

"""## Model Improvement 2 : GradientBoosting"""

from sklearn.ensemble import GradientBoostingClassifier

"""## Model Builing and Model Training"""

gr_model =GradientBoostingClassifier()

gr_model.fit(X_train,y_train)

"""## Model Testing"""

y_pred_train_d2 = gr_model.predict(X_train)

y_pred_test_d2 = gr_model.predict(X_test)

"""## Model Evaluation

## Confusion_Matrix :- To know the Misclassification done by the model
"""

accuracy_score(y_train,y_pred_train_d2)

confusion_matrix(y_train,y_pred_train_d2)

print(classification_report(y_train,y_pred_train_d2))

accuracy_score(y_test,y_pred_test_d2)

confusion_matrix(y_test,y_pred_test_d2)

print(classification_report(y_test,y_pred_test_d2))

"""## Model Deployment"""

from pickle import dump

dump(ad_model, open('Random_Forest(Company_data)','wb'))

from pickle import load

ad_model = load(open('/content/Random_Forest(Company_data)','rb'))

ad_model.predict(X_test)

"""## Model Done with AdaBoostClassifier is having Accracy score of 86.25%
## In classification_report It shows that model with AdaBoostClassifier having Better score in precision and f1-score compaired with other Models used here.
"""